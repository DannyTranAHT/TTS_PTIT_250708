import React, { useState } from 'react';
import './AllUsers.css';

const sampleUsers = [
  {
    name: 'Tr·∫ßn Th·ªã B',
    email: 'tranb@example.com',
    role: 'Project Manager',
    joinedDate: '01/07/2025',
    projects: 3,
    status: 'active',
  },
  {
    name: 'L√™ VƒÉn C',
    email: 'levanc@example.com',
    role: 'Employee',
    joinedDate: '28/06/2025',
    projects: 2,
    status: 'inactive',
  },
  {
    name: 'Nguy·ªÖn Th·ªã D',
    email: 'nguyend@example.com',
    role: 'Admin',
    joinedDate: '15/05/2025',
    projects: 5,
    status: 'active',
  },
  {
    name: 'Ph·∫°m VƒÉn E',
    email: 'phame@example.com',
    role: 'Employee',
    joinedDate: '10/06/2025',
    projects: 1,
    status: 'suspended',
  },
  {
    name: 'Ho√†ng Th·ªã F',
    email: 'hoangf@example.com',
    role: 'Project Manager',
    joinedDate: '03/07/2025',
    projects: 4,
    status: 'active',
  },
  // Th√™m d·ªØ li·ªáu m·∫´u
  {
    name: 'V≈© Minh G',
    email: 'vug@example.com',
    role: 'Employee',
    joinedDate: '05/07/2025',
    projects: 2,
    status: 'active',
  },
  {
    name: 'ƒê·∫∑ng Quang H',
    email: 'dangh@example.com',
    role: 'Admin',
    joinedDate: '01/06/2025',
    projects: 6,
    status: 'suspended',
  },
];

function AllUsers() {
  const [users, setUsers] = useState(sampleUsers);
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [modalVisible, setModalVisible] = useState(false);
  const [sortColumn, setSortColumn] = useState(null);
  const [sortOrder, setSortOrder] = useState('asc');

  const handleSort = (column) => {
    const newOrder = sortOrder === 'asc' ? 'desc' : 'asc';
    setSortOrder(newOrder);
    setSortColumn(column);
    const sorted = [...users].sort((a, b) => {
      const valA = a[column];
      const valB = b[column];
      if (typeof valA === 'number') return newOrder === 'asc' ? valA - valB : valB - valA;
      return newOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
    });
    setUsers(sorted);
  };

  const filteredUsers = users.filter(user => {
    const matchSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) || user.email.toLowerCase().includes(searchTerm.toLowerCase());
    const matchRole = !roleFilter || user.role.toLowerCase() === roleFilter;
    const matchStatus = !statusFilter || user.status === statusFilter;
    return matchSearch && matchRole && matchStatus;
  });

  return (
    <div className="user-management">
      <header className="header">
        <div className="header-content">
          <div className="logo">üõ†Ô∏è Project Hub</div>
          <div className="user-info">
            <span>Ch√†o m·ª´ng, <strong>Nguy·ªÖn VƒÉn A</strong> (Admin)</span>
            <div className="user-avatar">NA</div>
          </div>
        </div>
      </header>

      <main className="main-content">
        <div className="section-card">
          <div className="section-header">
            <h2 className="section-title">Qu·∫£n l√Ω Ng∆∞·ªùi d√πng</h2>
            <div className="filter-bar">
              <input
                type="text"
                className="search-input"
                placeholder="T√¨m ki·∫øm ng∆∞·ªùi d√πng..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <select className="filter-select" onChange={(e) => setRoleFilter(e.target.value)}>
                <option value="">T·∫•t c·∫£ vai tr√≤</option>
                <option value="admin">Admin</option>
                <option value="project manager">Project Manager</option>
                <option value="employee">Employee</option>
              </select>
              <select className="filter-select" onChange={(e) => setStatusFilter(e.target.value)}>
                <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                <option value="active">Ho·∫°t ƒë·ªông</option>
                <option value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</option>
                <option value="suspended">T·∫°m ng∆∞ng</option>
              </select>
              <button className="action-btn" onClick={() => setModalVisible(true)}>Th√™m ng∆∞·ªùi d√πng</button>
            </div>
          </div>

          <div className="table-container">
            <table>
              <thead>
                <tr>
                  <th onClick={() => handleSort('name')}>T√™n</th>
                  <th onClick={() => handleSort('email')}>Email</th>
                  <th onClick={() => handleSort('role')}>Vai tr√≤</th>
                  <th onClick={() => handleSort('joinedDate')}>Ng√†y tham gia</th>
                  <th onClick={() => handleSort('projects')}>S·ªë d·ª± √°n</th>
                  <th onClick={() => handleSort('status')}>Tr·∫°ng th√°i</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {filteredUsers.map((user, index) => (
                  <tr key={index}>
                    <td>{user.name}</td>
                    <td>{user.email}</td>
                    <td>{user.role}</td>
                    <td>{user.joinedDate}</td>
                    <td>{user.projects}</td>
                    <td>
                      <span className={`status-badge status-${user.status}`}>
                        {
                          user.status === 'active' ? 'Ho·∫°t ƒë·ªông' :
                          user.status === 'inactive' ? 'Kh√¥ng ho·∫°t ƒë·ªông' :
                          'T·∫°m ng∆∞ng'
                        }
                      </span>
                    </td>
                    <td className="action-buttons">
                      <button className="view-btn" onClick={() => alert(`Xem chi ti·∫øt: ${user.name}`)}>Xem</button>
                      <button className="edit-btn" onClick={() => alert(`Ch·ªânh s·ª≠a: ${user.name}`)}>S·ª≠a</button>
                      <button className="delete-btn" onClick={() => {
                        if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?')) {
                          setUsers(users.filter((_, i) => i !== index));
                        }
                      }}>X√≥a</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {modalVisible && (
          <div className="modal">
            <div className="modal-content">
              <span className="close-btn" onClick={() => setModalVisible(false)}>&times;</span>
              <h2 className="section-title">Th√™m Ng∆∞·ªùi d√πng</h2>
              <form className="modal-form" onSubmit={(e) => {
                e.preventDefault();
                setModalVisible(false);
              }}>
                <label>T√™n</label>
                <input type="text" placeholder="Nh·∫≠p t√™n ng∆∞·ªùi d√πng" required />
                <label>Email</label>
                <input type="email" placeholder="Nh·∫≠p email" required />
                <label>Vai tr√≤</label>
                <select required>
                  <option value="admin">Admin</option>
                  <option value="project manager">Project Manager</option>
                  <option value="employee">Employee</option>
                </select>
                <label>Tr·∫°ng th√°i</label>
                <select required>
                  <option value="active">Ho·∫°t ƒë·ªông</option>
                  <option value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</option>
                  <option value="suspended">T·∫°m ng∆∞ng</option>
                </select>
                <button className="action-btn" type="submit">L∆∞u</button>
              </form>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default AllUsers;
