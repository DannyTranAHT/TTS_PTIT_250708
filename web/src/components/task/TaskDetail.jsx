import React, { useEffect, useState } from "react";
import "../../styles/task/taskdetail.css";
import { useNavigate } from 'react-router-dom';
import { getProjectById } from "../../services/projectService";
import { getTaskById, updateTask,requestCompleteTask } from "../../services/taskService";
import { getUserById } from "../../services/userService"; 
import { getComment } from "../../services/commentService"; 
import { useParams } from 'react-router-dom';

const formatTime = (timestamp) => {
  
  const now = Date.now();
  const diff = now - timestamp;
  const minutes = Math.floor(diff / (1000 * 60));
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  if (minutes < 60) return `${minutes} ph√∫t tr∆∞·ªõc`;
  else if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`;
  else return `${days} ng√†y tr∆∞·ªõc`;
};

const TaskDetail = () => {
  const currentUser = JSON.parse(localStorage.getItem("user"));
  const { id } = useParams(); // L·∫•y id t·ª´ URL // L·∫•y id d·ª± √°n t·ª´ URL
  const [comments, setComments] = useState([]);
  const [commentInput, setCommentInput] = useState("");
  const [task, setTask] = useState([]);
  const [project, setProject] = useState([]);
  const [user, setUser] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
  const fetchTasksAndProject = async () => {
    try {
      // L·∫•y th√¥ng tin task
      const taskRes = await getTaskById(id);
      setTask(taskRes.task);

      // L·∫•y th√¥ng tin d·ª± √°n s·ª≠ d·ª•ng project_id c·ªßa task
      const projectRes = await getProjectById(taskRes.task.project_id);
      setProject(projectRes.project);
      console.log('Project:', projectRes.project);

      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng s·ª≠ d·ª•ng user_id c·ªßa task
      const userRes = await getUserById(taskRes.task.assigned_to_id);
      setUser(userRes.user);

      // L·∫•y danh s√°ch b√¨nh lu·∫≠n c·ªßa task
      const commentsRes = await getComment(taskRes.task._id);
      setComments(commentsRes.comments);
      
    } catch (error) {
      console.error('L·ªói khi l·∫•y th√¥ng tin:', error);
    }
  };

  fetchTasksAndProject();
}, [id]);
  

  useEffect(() => {
    const interval = setInterval(() => {
      setComments((prev) =>
        prev.map((c) => ({ ...c, time: formatTime(c.timestamp) }))
      );
    }, 60000);
    return () => clearInterval(interval);
  }, []);


  useEffect(() => {
    setComments((prev) =>
      prev.map((c) => ({ ...c, time: formatTime(c.timestamp) }))
    );
  }, []);

  const addComment = () => {
    const content = commentInput.trim();
    if (!content) {
      alert("Vui l√≤ng nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n");
      return;
    }

    const newComment = {
      id: comments.length + 1,
      author: "Nguy·ªÖn VƒÉn A",
      avatar: "NA",
      content,
      timestamp: Date.now(),
      time: "V·ª´a xong",
    };
    setComments([...comments, newComment]);
    setCommentInput("");
  };

  const cancelComment = () => setCommentInput("");

  const saveTask = async () => {
    try {
      // Ch·ªâ gi·ªØ l·∫°i c√°c tr∆∞·ªùng h·ª£p h·ª£p l·ªá theo schema
      const updatedTask = {
        name: task.name,
        description: task.description,
        due_date: task.due_date,
        status: task.status,
        priority: task.priority,
        assigned_to_id: task.assigned_to_id,
        hours: task.hours,
        attachments: task.attachments,
      };

      console.log("D·ªØ li·ªáu g·ª≠i l√™n:", updatedTask); // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
      await updateTask(task._id, updatedTask);
      alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
      setIsModalOpen(false);
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t task:", error.response?.data || error.message);
      alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  };
  const handleCompleteTask = async () => {
    setIsConfirmModalOpen(true);
  };

const confirmCompleteTask = async () => {
  try {
    await requestCompleteTask(task._id);
    alert("C√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c g·ª≠i y√™u c·∫ßu ho√†n th√†nh!");
    setTask({ ...task, status: "In Review" });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i y√™u c·∫ßu ho√†n th√†nh:", error);
    alert("Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu ho√†n th√†nh. Vui l√≤ng th·ª≠ l·∫°i!");
  } finally {
    setIsConfirmModalOpen(false);
  }
};

  return (
    <div className="page-container">
      <main className="main-content-task-detail">
        <div className="task-detail">
          <div className="task-header">
            <div>
              <h1 className="task-title">üé® {task?.name}</h1>
              <div className="task-project">{project?.name}</div>
            </div>
            <div className="task-actions">
              {currentUser?.id === task?.created_by && (
                <button className="action-btn" onClick={() => setIsModalOpen(true)}>
                  ‚úèÔ∏è Ch·ªânh s·ª≠a
                </button>
              )}
              {currentUser?.id === task?.assigned_to_id && (
                <button className="action-btn primary" onClick={handleCompleteTask}>
                  ‚úÖ Ho√†n th√†nh
                </button>
              )}
            </div>
          </div>
          {/* Task Meta */}
          <div className="task-meta">
            <div className="meta-item">
              <span className="meta-label">Tr·∫°ng th√°i</span>
              <div className="meta-value">
                <span className={`status-badge ${task?.status?.toLowerCase().replace(/\s+/g, '-')}`}>
                  {task?.status || "Ch∆∞a x√°c ƒë·ªãnh"}
                </span>
              </div>
            </div>
            <div className="meta-item">
              <span className="meta-label">ƒê·ªô ∆∞u ti√™n</span>
              <div className="meta-value">
                <span className={`priority-badge ${task?.priority?.toLowerCase()}`}>
                  {task?.priority || "Ch∆∞a x√°c ƒë·ªãnh"}
                </span>
              </div>
            </div>
            <div className="meta-item">
              <span className="meta-label">ƒê∆∞·ª£c g√°n cho</span>
              <div className="meta-value">
                <div className="assignee-info">
                  <div className="assignee-avatar">{user?.full_name
                  ? `${user.full_name.split(" ")[0][0]}${user.full_name.split(" ").slice(-1)[0][0]}`
                  : ""}
                  </div>
                  <span>{user?.full_name || "Ch∆∞a x√°c ƒë·ªãnh"}</span>
                </div>
              </div>
            </div>
            <div className="meta-item">
              <span className="meta-label">H·∫°n ho√†n th√†nh</span>
              <div className="meta-value">
                <div className="time-info overdue">
                  <span>‚è∞</span>
                  <span>{new Date(task?.due_date).toLocaleDateString() || "Ch∆∞a x√°c ƒë·ªãnh"}</span>
                </div>
              </div>
            </div>
            <div className="meta-item">
              <span className="meta-label">Th·ªùi gian ∆∞·ªõc t√≠nh</span>
              <div className="meta-value">{task?.hours || 0} gi·ªù</div>
            </div>
          </div>

          {/* Description */}
          <div className="task-description">
            <h3 className="section-title">M√¥ t·∫£</h3>
            <div className="description-text">
              {task?.description || "Ch∆∞a c√≥ m√¥ t·∫£"}
              <br />
              <br />
              ‚Ä¢ T·ªïng quan doanh s·ªë v√† metrics quan tr·ªçng
              <br />
              ‚Ä¢ Bi·ªÉu ƒë·ªì th·ªëng k√™ t∆∞∆°ng t√°c
              <br />
              ‚Ä¢ Responsive design cho nhi·ªÅu k√≠ch th∆∞·ªõc m√†n h√¨nh
              <br />
              ‚Ä¢ Dark mode support
              <br />
              ‚Ä¢ Animation v√† micro-interactions
              <br />
              <br />
              S·ª≠ d·ª•ng design system hi·ªán c√≥ v√† tu√¢n th·ªß Material Design
              guidelines.
            </div>
          </div>

          {/* Attachments */}
          <div className="task-attachments">
            <h3 className="section-title">T·ªáp ƒë√≠nh k√®m</h3>
            {[
              { name: "Dashboard_Mockup_v1.fig", size: "2.5 MB" },
              { name: "Design_System_Guide.pdf", size: "1.2 MB" },
              { name: "User_Flow_Diagram.jpg", size: "850 KB" },
            ].map((file, i) => (
              <div key={i} className="attachment-item">
                <div className="attachment-icon">üìé</div>
                <div className="attachment-info">
                  <div className="attachment-name">{file.name}</div>
                  <div className="attachment-size">{file.size}</div>
                </div>
              </div>
            ))}
          </div>

          {/* Comments */}
          <div className="comments-section">
            <h3 className="section-title">B√¨nh lu·∫≠n</h3>
            <div className="comment-form">
              <textarea
                className="comment-input"
                placeholder="Vi·∫øt b√¨nh lu·∫≠n..."
                value={commentInput}
                onChange={(e) => setCommentInput(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === "Enter" && e.ctrlKey) addComment();
                }}
              />
              <div className="comment-actions">
                <button className="comment-btn" onClick={cancelComment}>
                  H·ªßy
                </button>
                <button className="comment-btn primary" onClick={addComment}>
                  G·ª≠i b√¨nh lu·∫≠n
                </button>
              </div>
            </div>
            <div className="comments-list">
              {comments && comments.map((c) => (
                <div key={c._id} className="comment-item">
                  <div className="comment-avatar">
                    {c.user_id?.full_name
                      ? `${c.user_id.full_name.split(" ")[0][0]}${c.user_id.full_name.split(" ").slice(-1)[0][0]}`
                      : ""}
                  </div>
                  <div className="comment-content">
                    <div className="comment-header">
                      <span className="comment-author">{c.user_id?.full_name || "Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh"}</span>
                      <span className="comment-time">{new Date(c.created_at).toLocaleString()}</span>
                    </div>
                    <div className="comment-text">{c.content}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="sidebar">
          <div className="sidebar-card">
            <h3 className="section-title">Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h3>
            <div className="activity-feed">
              {[
                {
                  name: "John Doe",
                  avatar: "JD",
                  text: 'ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "ƒêang th·ª±c hi·ªán"',
                  time: "2 gi·ªù tr∆∞·ªõc",
                },
                {
                  name: "Nguy·ªÖn VƒÉn A",
                  avatar: "NA",
                  text: "ƒë√£ th√™m t·ªáp ƒë√≠nh k√®m Dashboard_Mockup_v1.fig",
                  time: "5 gi·ªù tr∆∞·ªõc",
                },
                {
                  name: "Jane Smith",
                  avatar: "JS",
                  text: 'ƒë√£ ho√†n th√†nh subtask "Ph√¢n t√≠ch requirements"',
                  time: "1 ng√†y tr∆∞·ªõc",
                },
                {
                  name: "John Doe",
                  avatar: "JD",
                  text: "ƒë√£ t·∫°o task n√†y",
                  time: "3 ng√†y tr∆∞·ªõc",
                },
              ].map((a, i) => (
                <div key={i} className="activity-item">
                  <div className="activity-avatar">{a.avatar}</div>
                  <div className="activity-content">
                    <div className="activity-text">
                      <strong>{a.name}</strong> {a.text}
                    </div>
                    <div className="activity-time">{a.time}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="sidebar-card">
            <h3 className="section-title">Th√¥ng tin th√™m</h3>
            <div className="meta-item">
              <span className="meta-label">Ng∆∞·ªùi t·∫°o</span>
              <div className="meta-value">
                <div className="assignee-info">
                  <div className="assignee-avatar">{project.owner_id?.full_name.split(" ")[0][0]}{project.owner_id?.full_name.split(" ").slice(-1)[0][0]}</div>
                  <span>{project.owner_id?.full_name || "Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh"}</span>
                </div>
              </div>
            </div>
            <div className="meta-item" style={{ marginTop: 15 }}>
              <span className="meta-label">Ng√†y t·∫°o</span>
              <div className="meta-value">{project.created_at ? new Date(project.created_at).toLocaleString() : "Kh√¥ng x√°c ƒë·ªãnh"}</div>
            </div>
            <div className="meta-item" style={{ marginTop: 15 }}>
              <span className="meta-label">L·∫ßn c·∫≠p nh·∫≠t cu·ªëi</span>
              <div className="meta-value">{project.updated_at ? new Date(project.updated_at).toLocaleString() : "Kh√¥ng x√°c ƒë·ªãnh"}</div>
            </div>
          </div>
        </div>
      </main>

      {/* Modal ch·ªânh s·ª≠a c√¥ng vi·ªác */}
      {isModalOpen && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h2>Ch·ªânh s·ª≠a c√¥ng vi·ªác</h2>
              <button className="modal-close-btn" onClick={() => setIsModalOpen(false)}>
                &times;
              </button>
            </div>
            <div className="modal-body">
              <input
                type="text"
                value={task?.name || ""}
                onChange={(e) => setTask({ ...task, name: e.target.value })}
                className="edit-task-input"
                placeholder="T√™n c√¥ng vi·ªác"
              />
              <textarea
                value={task?.description || ""}
                onChange={(e) => setTask({ ...task, description: e.target.value })}
                className="edit-task-input"
                placeholder="M√¥ t·∫£ c√¥ng vi·ªác"
              />
              <input
                type="date"
                value={task?.due_date ? new Date(task.due_date).toISOString().split("T")[0] : ""}
                onChange={(e) => setTask({ ...task, due_date: e.target.value })}
                className="edit-task-input"
              />
              <select
                value={task?.status || ""}
                onChange={(e) => setTask({ ...task, status: e.target.value })}
                className="edit-task-input"
              >
                <option value="To Do">To Do</option>
                <option value="In Progress">In Progress</option>
                <option value="In Review">In Review</option>
                <option value="Blocked">Blocked</option>
                <option value="Done">Done</option>
              </select>
              <select
                value={task?.priority || ""}
                onChange={(e) => setTask({ ...task, priority: e.target.value })}
                className="edit-task-input"
              >
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
                <option value="Critical">Critical</option>
              </select>
              <input
                type="number"
                value={task?.hours || 0}
                onChange={(e) => setTask({ ...task, hours: e.target.value })}
                className="edit-task-input"
                placeholder="Th·ªùi gian ∆∞·ªõc t√≠nh (gi·ªù)"
              />
            </div>
            <div className="modal-footer">
              <button className="action-btn" onClick={() => setIsModalOpen(false)}>
                ‚ùå H·ªßy
              </button>
              <button className="action-btn primary" onClick={saveTask}>
                üíæ L∆∞u
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal x√°c nh·∫≠n ho√†n th√†nh c√¥ng vi·ªác */}
      {isConfirmModalOpen && (
        <div className="confirm-modal-overlay">
          <div className="confirm-modal-content">
            <div className="confirm-modal-header">
              B·∫°n c√≥ mu·ªën ho√†n th√†nh c√¥ng vi·ªác n√†y kh√¥ng?
            </div>
            <div className="confirm-modal-footer">
              <button
                className="confirm-modal-btn cancel"
                onClick={() => setIsConfirmModalOpen(false)}
              >
                H·ªßy
              </button>
              <button
                className="confirm-modal-btn confirm"
                onClick={confirmCompleteTask}
              >
                X√°c nh·∫≠n
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TaskDetail;
