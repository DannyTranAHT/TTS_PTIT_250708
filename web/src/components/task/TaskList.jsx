import React, { useEffect, useState } from 'react';
import '../../styles/task/MyTasks.css';
import { getAllProjects,getProjectById } from '../../services/projectService';
import { getAllTasks } from '../../services/taskService';
import { getAllUsers } from '../../services/userService';
import { useParams } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';

const MyTasks = () => {
  const { id } = useParams();
  const [project, setProject] = useState(null);
  const [tasks, setTasks] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [availableMembers, setAvailableMembers] = useState([]);   
  const [filters, setFilters] = useState({
    status: '',
    priority: '',
    sort: 'newest',
    search: ''
  });

  const tasksPerPage = 6;

  const normalizeString = (str) => {
  return str
    .normalize('NFD') // T√°ch c√°c k√Ω t·ª± c√≥ d·∫•u th√†nh k√Ω t·ª± c∆° b·∫£n v√† d·∫•u
    .replace(/[\u0300-\u036f]/g, '') // Lo·∫°i b·ªè d·∫•u
    .toLowerCase(); // Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
};

  const filteredTasks = tasks.filter(task => {
    const matchesStatus = !filters.status || task.status === filters.status;
    const matchesPriority = !filters.priority || task.priority === filters.priority;
    const matchesSearch = !filters.search || (
      (task.title && normalizeString(task.title).includes(normalizeString(filters.search))) ||
      (task.description && normalizeString(task.description).includes(normalizeString(filters.search))) ||
      (task.project && normalizeString(task.project).includes(normalizeString(filters.search)))
    );
    return matchesStatus && matchesPriority && matchesSearch;
  }).sort((a, b) => {
    switch (filters.sort) {
      case 'newest':
        return new Date(b.due_date) - new Date(a.due_date);
      case 'oldest':
        return new Date(a.due_date) - new Date(b.due_date); 
      case 'name':
        return a.name.localeCompare(b.name);
      case 'priority':
        const order = { High: 3, Medium: 2, Low: 1 };
        return order[b.priority] - order[a.priority];
      default:
        return 0;
    }
  });

  const totalPages = Math.ceil(filteredTasks.length / tasksPerPage);
  const paginatedTasks = filteredTasks.slice(
    (currentPage - 1) * tasksPerPage,
    currentPage * tasksPerPage
  );

  const handleFilterChange = (e) => {
    setCurrentPage(1);
    setFilters(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleSearchChange = (e) => {
    setCurrentPage(1);
    setFilters(prev => ({ ...prev, search: e.target.value }));
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  useEffect(() => {
      // L·∫•y th√¥ng tin d·ª± √°n
      const fetchProject = async () => {
        try {
          const res = await getProjectById(id);
          setProject(res.project);
        } catch (error) {
          console.error('L·ªói khi l·∫•y th√¥ng tin d·ª± √°n:', error);
        }
      };
  
      // L·∫•y danh s√°ch task li√™n quan ƒë·∫øn d·ª± √°n
      const fetchTasks = async () => {
        try {
          const res = await getAllTasks(id);
          setTasks(res.tasks);
          console.log('Tasks:', res.tasks);
          setPagination({
            currentPage: res.currentPage,
            totalPages: res.totalPages,
            total: res.total,
          });
        } catch (error) {
          console.error('L·ªói khi l·∫•y danh s√°ch task:', error);
        }
      };
  
      // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
      const fetchUsers = async () => {
        try {
          const res = await getAllUsers();
          setAvailableMembers(res.users); // L∆∞u danh s√°ch ng∆∞·ªùi d√πng
        } catch (error) {
          console.error('L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:', error);
        }
      };
  
      fetchProject();
      fetchTasks();
      fetchUsers();
    }, [id]);

const getStatusClass = (status) => ({
  'To Do': 'status-todo',
  'In Progress': 'status-in-progress',
  'In Review': 'status-in-review',
  'Blocked': 'status-blocked',
  'Done': 'status-done'
}[status]);

const getPriorityClass = (priority) => ({
  'low': 'priority-low',
  'medium': 'priority-medium',
  'high': 'priority-high',
  'critical': 'priority-critical'
}[priority.toLowerCase()]);

const getStatusText = (status) => ({
  'To Do': 'Ch∆∞a l√†m',
  'In Progress': 'ƒêang th·ª±c hi·ªán',
  'In Review': 'ƒêang xem x√©t',
  'Blocked': 'B·ªã ch·∫∑n',
  'Done': 'Ho√†n th√†nh'
}[status]);

const getPriorityText = (priority) => ({
  'low': 'Th·∫•p',
  'medium': 'Trung b√¨nh',
  'high': 'Cao',
  'critical': 'R·∫•t cao'
}[priority.toLowerCase()]);

  return (
    <>
    <div className="main-content-my-tasks">
      <div className="page-header">
        <h1 className="page-title">Task C·ªßa T√¥i</h1>
      </div>

      <div className="filters-bar">
        <div className="filter-group">
          <label>Tr·∫°ng th√°i</label>
          <select name="status" onChange={handleFilterChange}>
            <option value="">T·∫•t c·∫£</option>
            <option value="To Do">Ch∆∞a l√†m</option>
            <option value="In Progress">ƒêang th·ª±c hi·ªán</option>
            <option value="In Review">ƒêang xem x√©t</option>
            <option value="Blocked">B·ªã ch·∫∑n</option>
            <option value="Done">Ho√†n th√†nh</option>
          </select>
        </div>

        <div className="filter-group">
          <label>∆Øu ti√™n</label>
          <select name="priority" onChange={handleFilterChange}>
            <option value="">T·∫•t c·∫£</option>
            <option value="Low">Th·∫•p</option>
            <option value="Medium">Trung b√¨nh</option>
            <option value="High">Cao</option>
            <option value="Critical">R·∫•t cao</option>
          </select>
        </div>

        <div className="filter-group">
          <label>S·∫Øp x·∫øp</label>
          <select name="sort" onChange={handleFilterChange}>
            <option value="newest">M·ªõi nh·∫•t</option>
            <option value="oldest">C≈© nh·∫•t</option>
            <option value="name">T√™n A-Z</option>
            <option value="priority">∆Øu ti√™n</option>
          </select>
        </div>
        <div className="search-box">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm task..."
            value={filters.search}
            onChange={handleSearchChange}
          />
        </div>
      </div>

      <div className="tasks-grid">
        {paginatedTasks.length > 0 ? paginatedTasks.map(task => (
          <div key={task._id} className="task-card" onClick={() => alert(`M·ªü chi ti·∫øt task #${task.id}`)}>
            <div className="task-header">
              <div>
                <h3 className="task-title">{task.name}</h3>
                <div className={`status-badge ${getStatusClass(task.status)}`}>
                  {getStatusText(task.status)}
                </div>
              </div>
              <div className={`priority-badge ${getPriorityClass(task.priority)}`}>
                {getPriorityText(task.priority)}
              </div>
            </div>

            <p className="task-description">{task.description}</p>

            <div className="task-meta">
              <div className="task-stats">
                <span>üìã {task.project}</span>
                <span>üë§ {task.assignee}</span>
              </div>
            </div>

            <div className="assignee-avatar">üìÅ</div>
            <div className="task-date">H·∫°n: {formatDate(task.due_date)}</div>

            <div className="task-actions">
              <button
                className="action-btn"
                onClick={(e) => {
                  e.stopPropagation();
                  alert(`Xem chi ti·∫øt task #${task.id}`);
                }}
              >
                üìã Xem chi ti·∫øt
              </button>
            </div>
          </div>
        )) : (
          <div className="empty-state">
            <h3>Kh√¥ng c√≥ task n√†o</h3>
            <p>B·∫°n hi·ªán kh√¥ng ƒë∆∞·ª£c g√°n task n√†o</p>
          </div>
        )}
      </div>

      {totalPages > 1 && (
        <div className="pagination">
          <button
            className={`page-btn ${currentPage === 1 ? 'disabled' : ''}`}
            onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
          >
            ‚Äπ
          </button>
          {Array.from({ length: totalPages }, (_, i) => i + 1).map(i => (
            <button
              key={i}
              className={`page-btn ${i === currentPage ? 'active' : ''}`}
              onClick={() => setCurrentPage(i)}
            >
              {i}
            </button>
          ))}
          <button
            className={`page-btn ${currentPage === totalPages ? 'disabled' : ''}`}
            onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
          >
            ‚Ä∫
          </button>
        </div>
      )}
    </div>
    </>
  );
};

export default MyTasks;
