import React, { useState, useRef, useEffect } from 'react';
import '../../styles/layout/Header.css';
import { jwtDecode } from 'jwt-decode';
import { useNavigate, Link } from 'react-router-dom';

const Header = () => {
  const [user, setUser] = useState(null);
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();

  const [notifications, setNotifications] = useState([
    { icon: 'üîî', text: 'Task "Vi·∫øt Unit Tests" ƒë√£ qu√° h·∫°n!', time: '2 gi·ªù tr∆∞·ªõc', read: false },
    { icon: '‚úÖ', text: 'D·ª± √°n Website Redesign ƒë√£ ho√†n th√†nh', time: 'H√¥m qua', read: false },
    { icon: 'üë•', text: 'Th√†nh vi√™n m·ªõi ƒë∆∞·ª£c th√™m v√†o Mobile App', time: '3 ng√†y tr∆∞·ªõc', read: false },
    { icon: 'üì¢', text: 'C√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi cho h·ªá th·ªëng', time: '4 ng√†y tr∆∞·ªõc', read: true },
    { icon: 'üìù', text: 'B·∫°n v·ª´a ƒë∆∞·ª£c giao task "Thi·∫øt k·∫ø wireframe"', time: '5 ng√†y tr∆∞·ªõc', read: false },
    { icon: 'üìÖ', text: 'Cu·ªôc h·ªçp Sprint Planning v√†o 9h s√°ng mai', time: '6 ng√†y tr∆∞·ªõc', read: true },
    { icon: '‚ö†Ô∏è', text: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh build app', time: '7 ng√†y tr∆∞·ªõc', read: false },
    { icon: 'üîÑ', text: 'B·∫°n v·ª´a c·∫≠p nh·∫≠t tr·∫°ng th√°i task "Deploy"', time: '1 tu·∫ßn tr∆∞·ªõc', read: true }
  ]);

  const [visibleCount, setVisibleCount] = useState(6);

  const toggleDropdown = () => setIsOpen(prev => !prev);

  const handleClickOutside = (e) => {
    if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {
      setIsOpen(false);
    }
  };

  const markAllAsRead = () => {
    setNotifications(prev => prev.map(n => ({ ...n, read: true })));
  };

  const handleLoadMore = () => {
    setVisibleCount(prev => prev + 6);
  };

  useEffect(() => {
      const token = localStorage.getItem('token');
  
      if (!token) {
        navigate('/login');
        return;
      }
  
      try {
        jwtDecode(token); // ki·ªÉm tra token h·ª£p l·ªá
        const storedUser = localStorage.getItem('user');
  
        if (storedUser) {
          setUser(JSON.parse(storedUser));
        } else {
          console.warn('Kh√¥ng t√¨m th·∫•y th√¥ng tin user ‚Üí logout');
          logoutUser();
        }
      } catch (err) {
        console.log('Token kh√¥ng h·ª£p l·ªá ‚Üí logout');
        logoutUser();
      }
    }, [navigate]);

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const visibleNotifications = notifications.slice(0, visibleCount);
  const hasMore = visibleCount < notifications.length;

  return (
    <header className="header">
      <div className="header-content">
        <div className="logo" onClick={() => navigate('/dashboard')} style={{ cursor: 'pointer' }}>üõ†Ô∏è Project Hub</div>
         <div className="user-info" >
          {user ? (
              <>
                <span onClick={() => navigate('/profile')} style={{ cursor: 'pointer' }}>
                Ch√†o m·ª´ng, <strong>{user.full_name}</strong></span>
                <div className="user-avatar">
                  {user.full_name?.charAt(0) || 'U'}
                </div>
              </>
            ) : (
              <span>ƒêang t·∫£i...</span>
            )}
          <div className="notification-wrapper" ref={dropdownRef}>
            <button className="notification-btn" onClick={toggleDropdown}>
              üîî
            </button>
            {isOpen && (
              <div className="notification-dropdown">
                <div className="dropdown-header">
                  <span>Th√¥ng b√°o</span>
                  <button className="mark-read" onClick={markAllAsRead}>ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc</button>
                </div>
                <div className="dropdown-list">
                  {visibleNotifications.map((n, i) => (
                    <div className={`dropdown-item ${n.read ? 'read' : ''}`} key={i}>
                      <span className="icon">{n.icon}</span>
                      <div className="content">
                        <div className="text">{n.text}</div>
                        <div className="time">{n.time}</div>
                      </div>
                    </div>
                  ))}
                  {hasMore && (
                    <button className="load-more-btn" onClick={handleLoadMore}>
                      Xem th√¥ng b√°o tr∆∞·ªõc ƒë√≥
                    </button>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;
